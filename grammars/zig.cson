# If this is your first time writing a language grammar, check out:
#   - https://flight-manual.atom.io/hacking-atom/sections/creating-a-grammar/

'scopeName': 'source.zig'
'name': 'Zig'
'fileTypes': [
  'zig'
]
'patterns': [
  # comments
  {
    'match': '///.*$'
    'name': 'comment.block.doc.zig'
  },
  {
    'match': '//!.*$'
    'name': 'keyword.doc.zig'
  },
  {
    'match': '//.*$'
    'name': 'comment.block.line.zig'
  },
  # strings
  {
    'match': '\\".*?\\"'
    'name': 'string.literal.zig'
  },
  {
    'match': '\\\\\\\\.*$'
    'name': 'string.multiline.block.literal.zig'
  },
  # special
  {
    'match': '@.*(?=\\()'
    'name': 'constant.import.zig'
  },
  # keywords
  {
    'match': '(^|\\s)try((?=\\s)|$)'
    'name': 'keyword.control.try.zig'
  },
  {
    'match': '(^|\\s)suspend((?=\\s)|$)'
    'name': 'keyword.control.suspend.zig'
  },
  {
    'match': '(^|\\s)resume((?=\\s)|$)'
    'name': 'keyword.control.resume.zig'
  },
  {
    'match': '(^|\\s)await((?=\\s)|$)'
    'name': 'keyword.control.await.zig'
  },
  {
    'match': '(^|\\s)switch((?=\\s)|$)'
    'name': 'keyword.control.switch.zig'
  },
  {
    'match': '(^|\\s)defer((?=\\s)|$)'
    'name': 'keyword.control.defer.zig'
  },
  {
    'match': '(^|\\s)errdefer((?=\\s)|$)'
    'name': 'keyword.control.errdefer.zig'
  },
  {
    'match': '(^|\\s)if((?=\\s)|$)'
    'name': 'keyword.control.if.zig'
  },
  {
    'match': '(^|\\s)else((?=\\s)|$)'
    'name': 'keyword.control.else.zig'
  },
  {
    'match': '(^|\\s)while((?=\\s)|$)'
    'name': 'keyword.control.while.zig'
  },
  {
    'match': '(^|\\s)for((?=\\s)|$)'
    'name': 'keyword.control.for.zig'
  },
  {
    'match': '(^|\\s)return((?=\\s)|$)'
    'name': 'keyword.control.return.zig'
  },
  {
    'match': '(^|\\s)noreturn((?=\\s)|$)'
    'name': 'keyword.control.return.zig'
  },
  {
    'match': '(^|\\s)continue((?=\\s)|$)'
    'name': 'keyword.control.continue.zig'
  },
  {
    'match': '(^|\\s)break((?=\\s)|$)'
    'name': 'keyword.control.break.zig'
  },
  {
    'match': '(^|\\s)const((?=\\s)|$)'
    'name': 'keyword.control.const.zig'
  },
  {
    'match': '(^|\\s)var((?=\\s)|$)'
    'name': 'keyword.control.var.zig'
  },
  {
    'match': '(^|\\s)unreachable((?=\\s)|$)'
    'name': 'keyword.control.unreachable.zig'
  },
  # values
  {
    'match': '(^|\\s)i8((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)u8((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)i16((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)u16((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)i32((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)u32((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)i64((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)u64((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)i128((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)u128((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)isize((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)usize((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)c_char((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)c_short((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)c_ushort((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)cint((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)cuint((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)c_long((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)c_ulong((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)c_longlong((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)c_ulonglong((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)c_longdouble((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)f16((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)f32((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)f64((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)f80((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)f128((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)bool((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)anyopaque((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)void((?=(\\s|\\{))|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)type((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)anyerror((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)comptime_int((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)comptime_float((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  # literals
  {
    'match': '(^|\\s)true((?=\\s)|$)'
    'name': 'constant.literal.zig'
  },
  {
    'match': '(^|\\s)false((?=\\s)|$)'
    'name': 'constant.literal.zig'
  },
  {
    'match': '(^|\\s)null((?=\\s)|$)'
    'name': 'constant.literal.zig'
  },
  {
    'match': '(^|\\s)undefined((?=\\s)|$)'
    'name': 'constant.literal.zig'
  },
  {
    'match': '(^|\\s)[0-9]+((?=\\s)|$)'
    'name': 'constant.literal.zig'
  },
  # functions
  {
    'match': '(^|\\s)fn((?=\\s)|$)'
    'name': 'entity.name.function.def.zig'
  },
  {
    'match': '(^|\\s)pub((?=\\s)|$)'
    'name': 'entity.name.function.def.zig'
  },
  {
    'match': '(^|\\s)(?<!@)\\w+(?=\\()'
    'name': 'entity.name.function.call.zig'
  },
]

'comments':
  'start': '// '
  'line': '//'
