# If this is your first time writing a language grammar, check out:
#   - https://flight-manual.atom.io/hacking-atom/sections/creating-a-grammar/

'scopeName': 'source.zig'
'name': 'Zig'
'fileTypes': [
  'zig'
]
'patterns': [
  # comments
  {
    'match': '///.*$'
    'name': 'comment.block.doc.zig'
  },
  {
    'match': '//!.*$'
    'name': 'keyword.doc.zig'
  },
  {
    'match': '//.*$'
    'name': 'comment.block.line.zig'
  },
  # strings
  {
    'match': '\\".*?\\"'
    'name': 'string.zig'
  },
  {
    'match': '\\\\\\\\.*$'
    'name': 'string.multiline.zig'
  },
  # special
  {
    'match': '@.*(?=\\()'
    'name': 'constant.import.zig'
  },
  # keywords
  {
    'match': 'try'
    'name': 'keyword.control.try.zig'
  },
  {
    'match': 'suspend'
    'name': 'keyword.control.suspend.zig'
  },
  {
    'match': 'resume'
    'name': 'keyword.control.resume.zig'
  },
  {
    'match': 'await'
    'name': 'keyword.control.await.zig'
  },
  {
    'match': 'switch'
    'name': 'keyword.control.switch.zig'
  },
  {
    'match': 'defer'
    'name': 'keyword.control.defer.zig'
  },
  {
    'match': 'errdefer'
    'name': 'keyword.control.errdefer.zig'
  },
  {
    'match': 'if'
    'name': 'keyword.control.if.zig'
  },
  {
    'match': 'else'
    'name': 'keyword.control.else.zig'
  },
  {
    'match': 'while'
    'name': 'keyword.control.while.zig'
  },
  {
    'match': 'for'
    'name': 'keyword.control.for.zig'
  },
  {
    'match': 'return'
    'name': 'keyword.control.return.zig'
  },
  {
    'match': 'noreturn'
    'name': 'keyword.control.return.zig'
  },
  {
    'match': 'continue'
    'name': 'keyword.control.continue.zig'
  },
  {
    'match': 'break'
    'name': 'keyword.control.break.zig'
  },
  {
    'match': 'const'
    'name': 'keyword.control.const.zig'
  },
  {
    'match': 'var'
    'name': 'keyword.control.var.zig'
  },
  {
    'match': 'unreachable'
    'name': 'keyword.control.unreachable.zig'
  },
  {
    'match': 'undefined'
    'name': 'keyword.control.undefined.zig'
  },
  # values
  {
    'match': 'i8'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'u8'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'i16'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'u16'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'i32'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'u32'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'i64'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'u64'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'i128'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'u128'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'isize'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'usize'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'c_char'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'c_short'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'c_ushort'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'cint'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'cuint'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'c_long'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'c_ulong'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'c_longlong'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'c_ulonglong'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'c_longdouble'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'f16'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'f32'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'f64'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'f80'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'f128'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'bool'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'anyopaque'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'void'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'type'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'anyerror'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'comptime_int'
    'name': 'keyword.type.zig'
  },
  {
    'match': 'comptime_float'
    'name': 'keyword.type.zig'
  },
  # functions
  {
    'match': 'fn'
    'name': 'entity.name.function.def.zig'
  },
  {
    'match': 'pub'
    'name': 'entity.name.function.def.zig'
  },
  # {
  #   'match': '(?:^|[^@]).+(?=\\()'
  #   'name': 'entity.name.function.call.zig'
  # },
]

'comments':
  'start': '// '
  'line': '//'
