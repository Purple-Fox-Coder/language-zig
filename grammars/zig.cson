# If this is your first time writing a language grammar, check out:
#   - https://flight-manual.atom.io/hacking-atom/sections/creating-a-grammar/

'scopeName': 'source.zig'
'name': 'Zig'
'fileTypes': [
  'zig'
]
'patterns': [
  # comments
  {
    'match': '///.*$'
    'name': 'comment.block.doc.zig'
  },
  {
    'match': '//!.*$'
    'name': 'keyword.doc.zig'
  },
  {
    'match': '//.*$'
    'name': 'comment.block.line.zig'
  },
  # strings
  {
    'match': '\\".*\\"'
    'name': 'string.literal.zig'
  },
  {
    'match': '\\\\\\\\.*$'
    'name': 'string.multiline.block.literal.zig'
  },
  # special
  {
    'match': '@.*(?=\\()'
    'name': 'constant.import.zig'
  },
  # keywords
  {
    'match': '(^|\\s)(try|suspend|resume|await|switch)((?=\\s)|$)'
    'name': 'keyword.control.try.zig'
  },
  {
    'match': '(^|\\s)(defer|errdefer)((?=\\s)|$)'
    'name': 'keyword.control.defer.zig'
  },
  {
    'match': '(^|\\s)(if|else|while|for|return|noreturn)((?=\\s)|$)'
    'name': 'keyword.control.if.zig'
  },
  {
    'match': '(^|\\s)(continue|break|const|var|unreachable)((?=\\s)|$)'
    'name': 'keyword.control.continue.zig'
  },
  # values
  {
    'match': '(^|\\s)(i8|u8|i16|u16|i32|u32|i64|u64|i128|u128)((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)(isize|usize)((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)(c_char|c_short|c_ushort|cint|cuint)((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)(c_long|c_ulong|c_longlong|c_ulonglong)((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)(c_longdouble|f16|f32|f64|f80|f128)((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)bool((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)void((?=(\\s|\\{))|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)(anyopaque|type|anyerror)((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  {
    'match': '(^|\\s)(comptime_int|comptime_float)((?=\\s)|$)'
    'name': 'keyword.type.zig'
  },
  # literals
  {
    'match': '(^|\\s)(true|false|null|undefined)((?=\\s)|$)'
    'name': 'constant.literal.zig'
  },
  {
    'match': '(^|\\s)[0-9]+((?=\\s)|$)'
    'name': 'constant.literal.zig'
  },
  # functions
  {
    'match': '(^|\\s)(fn|pub)((?=\\s)|$)'
    'name': 'entity.name.function.def.zig'
  },
  {
    'match': '(^|\\s|\\.)(?<!@)\\w+(?=\\()'
    'name': 'entity.name.function.call.zig'
  },
]

'comments':
  'start': '// '
  'line': '//'
